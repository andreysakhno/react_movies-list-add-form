{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","enums/new-movie-form-fields.ts","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","urlValidationPattern","newMovieFormFields","name","label","required","validationCallback","value","test","validationErrorMessage","TextField","placeholder","onChange","onValidate","useState","Math","random","toFixed","slice","id","touched","setTouched","isValided","hasError","htmlFor","type","classNames","event","target","onBlur","emptyFormFields","formFields","reduce","prev","NewMovie","onAdd","count","setCount","movieData","setMovieData","requiredFields","filter","areRequiredFieldsEmpty","some","trim","areInvalidFields","isInvalidInputs","onSubmit","preventDefault","key","newValue","disabled","App","moviesFromServer","setMovies","newMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.89c9c572.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { Movie } from '../types/Movie';\n\ntype NewMovieFormFields = {\n  name: keyof Movie,\n  label: string,\n  required: boolean,\n  validationCallback?: (value: string) => boolean,\n  validationErrorMessage?: string,\n};\n\n// eslint-disable-next-line max-len\nconst urlValidationPattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\nexport const newMovieFormFields: NewMovieFormFields[] = [\n  {\n    name: 'title',\n    label: 'Title',\n    required: true,\n  },\n  {\n    name: 'description',\n    label: 'Description',\n    required: false,\n  },\n  {\n    name: 'imgUrl',\n    label: 'Image URL',\n    required: true,\n    validationCallback: (value) => urlValidationPattern.test(value),\n  },\n  {\n    name: 'imdbUrl',\n    label: 'Imdb URL',\n    required: true,\n    validationCallback: (value) => urlValidationPattern.test(value),\n    validationErrorMessage: 'URL is not valid',\n  },\n  {\n    name: 'imdbId',\n    label: 'Imdb ID',\n    required: true,\n  },\n];\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (value: string) => void,\n  onValidate?: (value: string) => boolean,\n  validationErrorMessage?: string,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  onValidate = () => true,\n  validationErrorMessage = 'Invalid input',\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const isValided = onValidate(value);\n  const hasError = touched && required && (!value || !isValided);\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">\n          {!value ? `${label} is required` : validationErrorMessage}\n        </p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { newMovieFormFields as formFields } from '../../enums';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (newMovie: Movie) => void;\n};\n\nexport const emptyFormFields: Movie = formFields\n  .reduce((prev, { name }) => ({\n    ...prev,\n    [name]: '',\n  }), {} as Movie);\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [movieData, setMovieData] = useState(emptyFormFields);\n\n  const requiredFields = formFields.filter(({ required }) => required);\n\n  const areRequiredFieldsEmpty = requiredFields\n    .some(({ name }) => !movieData[name].trim());\n\n  const areInvalidFields = requiredFields\n    .some(({ name, validationCallback }) => (\n      validationCallback ? !validationCallback(movieData[name]) : false\n    ));\n\n  const isInvalidInputs = areRequiredFieldsEmpty || areInvalidFields;\n\n  const handleInputChange = (key: keyof Movie, newValue: string) => {\n    setMovieData({\n      ...movieData,\n      [key]: newValue,\n    });\n  };\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (isInvalidInputs) {\n      return;\n    }\n\n    onAdd(movieData);\n    setMovieData(emptyFormFields);\n    setCount(count + 1);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleFormSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      {formFields.map(({\n        name,\n        label,\n        required,\n        validationCallback,\n        validationErrorMessage,\n      }) => (\n        <TextField\n          key={name}\n          name={name}\n          label={label}\n          value={movieData[name]}\n          onChange={(value) => handleInputChange(name, value)}\n          required={required}\n          onValidate={validationCallback}\n          validationErrorMessage={validationErrorMessage}\n        />\n      ))}\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isInvalidInputs}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport { Movie } from './types/Movie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const handleAdd = (newMovie: Movie) => {\n    setMovies([...movies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={handleAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}